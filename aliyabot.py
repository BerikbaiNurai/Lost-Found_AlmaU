import logging
import os
import json
from os.path import exists
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler, CallbackQueryHandler
)

BOT_TOKEN = os.environ["BOT_TOKEN"]

logging.basicConfig(level=logging.INFO)

CHOOSING, TYPING_DESC, ASK_PHOTO, SENDING_PHOTO = range(4)

DATA_FILE = "data.json"


if exists(DATA_FILE):
    with open(DATA_FILE, "r") as f:
        data = json.load(f)
else:
    data = {
        "users": {},
        "items": [],
        "button_stats": {}
    }

def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    username = update.message.from_user.username or "anon"

    if user_id not in data["users"]:
        data["users"][user_id] = username
        save_data()

    user_number = list(data["users"]).index(user_id) + 1

    keyboard = [["üü¢ –ù–∞—à—ë–ª", "üî¥ –ü–æ—Ç–µ—Ä—è–ª"],
                ["üü¢ –ù–∞–π–¥–µ–Ω–æ", "üî¥ –ü–æ—Ç–µ—Ä—è–Ω–æ"],
                ["üóÇ –ú–æ–∏ –ø–æ—Å—Ç—ã"]]

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –¢—ã {user_number}-–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Å—á—ë—Ç—É.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return CHOOSING


async def send_template(update: Update, context: ContextTypes.DEFAULT_TYPE, mode: str = ""):
    if mode == "found":
        template = (
            "‚ùóÔ∏è*–®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –≤–µ—â—å:*\n\n"
            "*1. –ß—Ç–æ –≤—ã –Ω–∞—à–ª–∏:*\n"
            "_–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π, –±—Ä–∞—Å–ª–µ—Ç, –±—É—Ç—ã–ª–∫–∞ –∏ —Ç.–ø._\n\n"
            "*2. –ì–¥–µ –Ω–∞—à–ª–∏:*\n"
            "_–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ: –∞—É–¥–∏—Ç–æ—Ä–∏—è, –∫–æ—Ä–ø—É—Å, –∫–æ—Ä–∏–¥–æ—Ä, —Å—Ç–æ–ª–æ–≤–∞—è –∏ —Ç.–ø._\n\n"
            "*3. –ö–æ–≥–¥–∞ –Ω–∞—à–ª–∏:*\n"
            "_–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ_\n\n"
            "*4. –ö–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≥–¥–µ –∑–∞–±—Ä–∞—Ç—å:*"
        )
    elif mode == "lost":
        template = (
            "‚ùóÔ∏è*–®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã –∏—â–∏—Ç–µ –≤–µ—â—å:*\n\n"
            "*1. –ß—Ç–æ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏:*\n"
            "_–ö—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–æ–Ω—Ç, –∫–ª—é—á–∏, —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç –∏ —Ç.–¥._\n\n"
            "*2. –ì–¥–µ –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ—Ç–µ—Ä—è–ª–∏:*\n"
            "_–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø—É—Å, –∞—É–¥–∏—Ç–æ—Ä–∏—é, –∑–æ–Ω—É (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞, —Å—Ç–æ–ª–æ–≤–∞—è –∏ —Ç.–¥.)_\n\n"
            "*3. –ö–æ–≥–¥–∞ –ø–æ—Ç–µ—Ä—è–ª–∏:*\n"
            "_–î–∞—Ç–∞ –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è_\n\n"
            "*4. –§–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)*"
        )
    else:
        template = (
            "‚ùóÔ∏è*–û–±—â–∏–π —à–∞–±–ª–æ–Ω:*\n\n"
            "1. –ß—Ç–æ –ø–æ—Ç–µ—Ä—è–Ω–æ/–Ω–∞–π–¥–µ–Ω–æ\n"
            "2. –ì–¥–µ\n"
            "3. –ö–æ–≥–¥–∞\n"
            "4. –§–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
            "5. –ö–æ–Ω—Ç–∞–∫—Ç: @username\n"
            "#–ø–æ–∏—Å–∫ #–Ω–∞—Ö–æ–¥–∫–∞"
        )
    await update.message.reply_text(template, parse_mode="Markdown")
    return CHOOSING


async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text
    if msg == "üü¢ –ù–∞—à—ë–ª":
        context.user_data["type"] = "found"
        await send_template(update, context, "found")
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        return TYPING_DESC
    elif msg == "üî¥ –ü–æ—Ç–µ—Ä—è–ª":
        context.user_data["type"] = "lost"
        await send_template(update, context, "lost")
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        return TYPING_DESC
    elif msg == "üü¢ –ù–∞–π–¥–µ–Ω–æ":
        return await show_found_items(update, context)
    elif msg == "üî¥ –ü–æ—Ç–µ—Ä—è–Ω–æ":
        return await show_lost_items(update, context)
    elif msg == "üóÇ –ú–æ–∏ –ø–æ—Å—Ç—ã":
        return await show_my_posts(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return CHOOSING


async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    control_buttons = ["üü¢ –ù–∞—à—ë–ª", "üî¥ –ü–æ—Ç–µ—Ä—è–ª", "üü¢ –ù–∞–π–¥–µ–Ω–æ", "üî¥ –ü–æ—Ç–µ—Ä—è–Ω–æ", "üóÇ –ú–æ–∏ –ø–æ—Å—Ç—ã"]

    if text in control_buttons:
        return await choose_action(update, context)

    context.user_data["description"] = text
    keyboard = [["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]]
    await update.message.reply_text("–£ –≤–∞—Å –µ—Å—Ç—å —Ñ–æ—Ç–æ —ç—Ç–æ–π –≤–µ—â–∏?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return ASK_PHOTO

async def ask_for_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    if answer == "‚úÖ –î–∞":
        await update.message.reply_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")
        return SENDING_PHOTO
    elif answer == "‚ùå –ù–µ—Ç":
        return await save_item_without_photo(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç.")
        return ASK_PHOTO


async def save_item_without_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global data
    item = {
        "user_id": update.message.from_user.id,
        "username": update.message.from_user.username or "anon",
        "type": context.user_data["type"],
        "description": context.user_data["description"],
        "photo_file_id": None
    }
    data["items"].append(item)
    save_data()
    await update.message.reply_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    return await start(update, context)



async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global data
    photo_file_id = update.message.photo[-1].file_id
    item = {
        "user_id": update.message.from_user.id,
        "username": update.message.from_user.username or "anon",
        "type": context.user_data["type"],
        "description": context.user_data["description"],
        "photo_file_id": photo_file_id
    }
    data["items"].append(item)
    save_data()
    await update.message.reply_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    return await start(update, context)



async def show_found_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    found_items = [item for item in data["items"] if item["type"] == "found"]
    if not found_items:
        await update.message.reply_text("‚ùå –ù–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–µ—â–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return CHOOSING
    for item in found_items[:5]:
        caption = f"üü¢ *–ù–∞–π–¥–µ–Ω–æ*\n\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {item['description']}\n*–ö–æ–Ω—Ç–∞–∫—Ç:* @{item['username']}"
        if item["photo_file_id"]:
            await update.message.reply_photo(item["photo_file_id"], caption=caption, parse_mode="Markdown")
        else:
            await update.message.reply_text(caption + "\n\nüìå *–§–æ—Ç–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ*", parse_mode="Markdown")
    return CHOOSING


async def show_lost_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lost_items = [item for item in data["items"] if item["type"] == "lost"]
    if not lost_items:
        await update.message.reply_text("‚ùå –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –≤–µ—â–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return CHOOSING
    for item in lost_items[:5]:
        caption = f"üî¥ *–ü–æ—Ç–µ—Ä—è–Ω–æ*\n\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {item['description']}\n*–ö–æ–Ω—Ç–∞–∫—Ç:* @{item['username']}"
        if item["photo_file_id"]:
            await update.message.reply_photo(item["photo_file_id"], caption=caption, parse_mode="Markdown")
        else:
            await update.message.reply_text(caption + "\n\nüìå *–§–æ—Ç–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ*", parse_mode="Markdown")
    return CHOOSING


async def show_my_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_posts = [item for item in data["items"] if item["user_id"] == user_id]
    if not user_posts:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
        return CHOOSING
    for item in user_posts[:10]:
        label = "üü¢ –ù–∞–π–¥–µ–Ω–æ" if item["type"] == "found" else "üî¥ –ü–æ—Ç–µ—Ä—è–Ω–æ"
        caption = f"{label}\n\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {item['description']}\n*–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç.*"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{item['user_id']}"),
             InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å", callback_data="ignore")]
        ])
        if item["photo_file_id"]:
            await update.message.reply_photo(item["photo_file_id"], caption=caption, parse_mode="Markdown", reply_markup=keyboard)
        else:
            await update.message.reply_text(caption, reply_markup=keyboard, parse_mode="Markdown")
    return CHOOSING


async def delete_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global data
    query = update.callback_query
    await query.answer()

    action, user_id = query.data.split(":")
    user_id = int(user_id)

    user_posts = [item for item in data["items"] if item["user_id"] == user_id]
    if user_posts:
        data["items"].remove(user_posts[0])
        save_data()

        try:
            await query.message.delete()
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    else:
        await query.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return ConversationHandler.END


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT, choose_action)],
            TYPING_DESC: [MessageHandler(filters.TEXT, get_description)],
            ASK_PHOTO: [MessageHandler(filters.TEXT, ask_for_photo)],
            SENDING_PHOTO: [MessageHandler(filters.PHOTO, get_photo)],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(delete_post, pattern="delete:"))

    app.run_polling()

if __name__ == "__main__":
    main()
